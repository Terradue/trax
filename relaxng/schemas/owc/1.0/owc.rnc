# -*- rnc -*-
   # RELAX NG Compact Syntax Grammar for OGC Context Atom Encoding
   # ATOM encoding and OWC classes as defined in OGC 12-084 
   
   namespace owc = "http://www.opengis.net/owc/1.0"
   namespace s = "http://purl.oclc.org/dsdl/schematron"
   namespace dc="http://purl.org/dc/elements/1.1/" 
   namespace georss="http://www.georss.org/georss" 
   namespace atom = "http://www.w3.org/2005/Atom"

   # Define date time interval
   datetimeInterval= xsd:string { pattern ="[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?(Z|[\+\-][0-9]{2}:[0-9]{2})?(/[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?(Z|[\+\-][0-9]{2}:[0-9]{2})|)"}
  
   # Redefine atom:feed to include new owc and dc elements
   atomFeedConstruct &= owcDisplay? & element dc:publisher { text } ? 
       & element dc:date { datetimeInterval }? & georssWhere?
                     
   # Redefine atom:entry to include new owc and dc elements
   atomEntryConstruct &= owcOffering* & element dc:publisher { text }? 
       & element dc:date { datetimeInterval }? & georssWhere ?
       & element owc:minScaleDenominator { xsd:double }?
       & element owc:maxScaleDenominator { xsd:double }?

   # owcContent attribute extensions
   owcCommonAttributes = undefinedAttribute*
   
   owcURL = xsd:string { pattern = "(ftp|http)s?://.*"}
   	
   # owcOffering 
   owcOffering = element owc:offering { owcCommonAttributes, 
      attribute code { text },
      ( owcOperation* & owcContent* & owcStyleSet* & extensionElement*)}
      
   # owcOperation 
   owcOperation = element owc:operation { owcCommonAttributes, 
      attribute code { text }, attribute href { owcURL },
      attribute type { text }?, 
      ( ( attribute method {"GET"} & 
                element owc:result{( owcContentConstruct )}? 
                & extensionElement* ) |
        ( attribute method {"POST"} & 
                element owc:result{( owcContentConstruct )}? 
                & element owc:request {( owcContentConstruct )}? 
                & extensionElement* ) )
   }
      
   # owcContent 
   owcContentConstruct = owcCommonAttributes &
      ( ( attribute type { text }, attribute href { owcURL }) |
        ( attribute type { text }, ( text | anyElement)* )  )
  
   owcContent = element owc:content { owcContentConstruct } 
   
   # owcStyleSet 
   owcStyleSet = element owc:styleSet { owcCommonAttributes, 
      attribute default { "0" | "1" } ?,
      (element owc:name { text } & element owc:title { text }
       &element owc:abstract { text }?
       &element owc:legendURL { attribute type { text },
       				attribute href { owcURL } }?
       &owcContent? & extensionElement*)}  
   
   # owc:display  
   owcDisplay = element owc:display {      
      (element owc:pixelWidth { xsd:integer }?
       & element owc:pixelHeight { xsd:integer }?
       & element owc:mmPerPixel { xsd:float }?)
       & extensionElement*
   }   
 
   # Define georss:where 
   include "../../georss/1.1/georss.rnc"
   
   # Replacing definitions on RFC4287 
   include "../../atom/2005/rfc4287.rnc"{
      # Redefine the Simple Extension to exclude owc:* elements
      simpleExtensionElement = element * - 
          (atom:* | owc:* | dc:publisher | dc:date |  georss:where) { text }

      # Redefine the Structured Extension to exclude owc:* elements
      structuredExtensionElement = element * - 
          (atom:* | owc:* | dc:publisher | dc:date | georss:where) {
             (attribute * { text }+,(text|anyElement)*)
           | (attribute * { text }*, (text?, anyElement+, (text|anyElement)*))} 

      # Redefine Atom rules    
      atomFeed = [
       s:rule [ context = "atom:feed"
         s:assert [ test = "atom:author or not(atom:entry[not(atom:author)])"
           "An atom:feed must have an atom:author unless all "
           ~ "of its atom:entry children have an atom:author."]]
      
       s:rule [ context = "atom:feed"
         s:assert [ test = 
           "atom:category[@scheme='http://www.opengis.net/spec/owc/specReference']"
           "An atom:feed must have an atom:category with the OWC "
           ~ "specification reference identified with the "
           ~ "  @scheme='http://www.opengis.net/spec/owc/specReference' "]]
       ]
       element atom:feed { atomFeedConstruct }     
       
      atomEntry =[
       s:rule [ context = "atom:entry"
         s:assert [ test = "atom:content"
          "An atom:entry must have one atom:content MUST have content "
          ~ "element in a format understandable by generic Atom readers"
          ~ " ( @type equal to 'html' is recommended)"]]
	 
       s:rule [ context = "atom:entry"
	 s:assert [ test = "atom:link[@rel='alternate'] "
            ~ "or atom:link[not(@rel)] or atom:content"
            "An atom:entry must have at least one atom:link element "
            ~ "with a rel attribute of 'alternate' or an atom:content."]]
            
       s:rule [ context = "atom:entry"
         s:assert [ test = "atom:author or "
	       ~ "../atom:author or atom:source/atom:author"
	       "An atom:entry must have an atom:author "
	       ~ "if its feed does not."]]
       ]
      element atom:entry { atomEntryConstruct } 
   }
   # EOF
