# -*- rnc -*-
   # RELAX NG Compact Syntax Grammar for 
   # ATOM encoding and foreign elements for OpenSearch 
   
namespace s = "http://purl.oclc.org/dsdl/schematron"
namespace atom = "http://www.w3.org/2005/Atom"
namespace os = "http://a9.com/-/spec/opensearch/1.1/"

  
# Redefine atom:feed to include new OpenSearch elements 
atomFeedConstruct &= osQuery ? & osTotalResults? &osStartIndex? &osItemsPerPage?                       

osQuery = element os:Query { undefinedAttribute*, ( osQueryAttr ) } 
osTotalResults = element os:totalResults { xsd:int }
osStartIndex = element os:startIndex { xsd:int }
osItemsPerPage = element os:itemsPerPage { xsd:int }

include "osquery.rnc"

# Replacing definitions on RFC4287 
include "../../atom/2005/rfc4287.rnc"{

      # Redefine the Simple Extension to exclude os:* elements
      simpleExtensionElement = element * - (atom:* | os:*) { text }

      # Redefine the Structured Extension to exclude os:* elements
      structuredExtensionElement = element * - 
          (atom:* |  os:* ) {
             (attribute * { text }+,(text|anyElement)*)
           | (attribute * { text }*, (text?, anyElement+, (text|anyElement)*))} 

      # Redefine Atom rules    
      atomFeed = [
      s:pattern [ name="check author" 
       s:rule [ context = "atom:feed"
         s:assert [ test = "atom:author or not(atom:entry[not(atom:author)])"
           "An atom:feed must have an atom:author unless all "
           ~ "of its atom:entry children have an atom:author."]]]   
       ]
       element atom:feed { atomFeedConstruct }     
       
      atomEntry =[
       s:pattern [ name="check entry content" 
       s:rule [ context = "atom:entry"
         s:assert [ test = "atom:content"
          "An atom:entry must have one atom:content MUST have content "
          ~ "element in a format understandable by generic Atom readers"
          ~ " ( @type equal to 'html' is recommended)"]]]

	   s:pattern [ name="check entry's alternate link"
       s:rule [ context = "atom:entry"
	      s:assert [ test = "atom:link[@rel='alternate'] "
            ~ "or atom:link[not(@rel)] or atom:content"
            "An atom:entry must have at least one atom:link element "
            ~ "with a rel attribute of 'alternate' or an atom:content."]]]

	   s:pattern [ name="check entry's author"            
       s:rule [ context = "atom:entry"
         s:assert [ test = "atom:author or "
	       ~ "../atom:author or atom:source/atom:author"
	       "An atom:entry must have an atom:author "
	       ~ "if its feed does not."]]]
       ]
      element atom:entry { atomEntryConstruct } 
}
# EOF

